import axios from 'axios';
import * as R from 'ramda';



interface CountryEntry {
  flag: string;
  name: string;
  currencies: Currency[];
}

interface Currency {
  code: string,
  name: string,
  symbol: string;
}

export const getCurrencyCodes = async () => {
  const url = 'https://restcountries.eu/rest/v2/all?fields=name;flag;currencies';
  const { data } = await axios.get<CountryEntry[]>(url);
  return transformCountryDataToCurrencyCodes(data);
}


export type CurrencyEntry = {
  countries: Array<{
    name: string,
    flag: string
  }>
} & Currency;

export const transformCountryDataToCurrencyCodes = (countryData: CountryEntry[]) => {
  const currencies: CurrencyEntry[] = [];
  countryData.forEach(country => {
    country.currencies.forEach((currency: Currency) => {
      const entry = R.find(R.propEq('code', currency.code), currencies);
      if (!entry) {
        currencies.push({ name: currency.name, code: currency.code, symbol: currency.symbol, countries: [{ name: country.name, flag: country.flag }] })
      } else {
        entry.countries.push({ flag: country.flag, name: country.name }
      }
    });
  })
  return currencies.sort(currenciesAlphabeticallyByCode);
}

const currenciesAlphabeticallyByCode = (a: CurrencyEntry, b: CurrencyEntry) => {
  if (a.code < b.code) {
    return -1;
  } else if (a.code > b.code) {
    return 1;
  }
  return 0;
}